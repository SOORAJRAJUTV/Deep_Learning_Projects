# -*- coding: utf-8 -*-
"""Breast Cancer Classification with NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W26IZIUxzp7nMSKYsOQWLjs2gYSV_skY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import sklearn.datasets

dataset = sklearn.datasets.load_breast_cancer()

print(dataset)

dataset.keys()

data_frame =pd.DataFrame(dataset.data,columns=dataset.feature_names)

data_frame.head()

data_frame['label'] = dataset.target

data_frame.head()

data_frame.shape

data_frame['label'].value_counts()

dataset.data.std()

data_frame.std()

data_frame.isnull().sum()

data_frame.info()

data_frame.describe()

X = data_frame.drop(columns='label',axis=1)
Y = data_frame['label']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,random_state=2,test_size=0.2,stratify= Y)

print(X.shape,X_train.shape,X_test.shape)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_std = scaler.fit_transform(X_train)
X_test_std = scaler.transform(X_test)

#X = np.asarray(X)
#Y = np.asarray(Y)

"""**importing tensorflow and keras**"""

import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras

"""**Building Neural Network**"""

model = keras.Sequential([

                          #keras.layers.Flatten(input_shape = (30,)),
                          keras.layers.Input(shape=(30,)),
                          keras.layers.Dense(20, activation='relu'),
                          keras.layers.Dense(2,activation = 'sigmoid')

])

"""**Compiling Neural Network**"""

model.compile( optimizer = 'adam',
               loss = 'sparse_categorical_crossentropy',
               metrics = ['accuracy'])

history = model.fit( X_train_std,Y_train, validation_split = 0.1, epochs=10)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend(['training data','validation data'],loc='upper left')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend(['training data','validation data'],loc='upper right')

loss, accuracy = model.evaluate(X_test_std, Y_test)

print(accuracy)

print(X_test_std.shape)
print(X_test_std[0])

Y_pred = model.predict(X_test_std)

print(Y_pred.shape)
print(Y_pred[0])

"""**0 --> Malignant**

**1 -->Benign**
"""

print(Y_pred)

Y_pred_labels = [np.argmax(i) for i in Y_pred]
print(Y_pred_labels)

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

input_df = pd.DataFrame(input_data_reshaped, columns=X.columns)


std_data = scaler.transform(input_df)

prediction = model.predict(std_data)

prediction_labels = [np.argmax(i) for i in prediction]

if(prediction_labels[0]==0):
  print('The cancer is Malignant')
else:
  print('The cancer is Benign')

