# -*- coding: utf-8 -*-
"""Face Mask Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15SUp1xUyd7sKKPk7T9UioQo8d5jpkIGw
"""

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d omkargurav/face-mask-dataset

from zipfile import ZipFile
dataset = '/content/face-mask-dataset.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

!ls

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from PIL import Image
import cv2
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

with_mask = os.listdir('/content/data/with_mask/')
len(with_mask)

without_mask = os.listdir('/content/data/without_mask/')
len(without_mask)

print(with_mask[0:5])
print(with_mask[-5:])

print(without_mask[0:5])
print(without_mask[-5:])

"""**Label encoing**

with_mask : 1

without_mask : 0
"""

with_mask_label = [1]*3725
without_mask_label = [0]*3828

print(with_mask_label[0:5])
print(without_mask_label[0:5])

print(len(with_mask_label))
print(len(without_mask_label))

labels =  with_mask_label + without_mask_label
print(len(labels))

type(labels)

img = mpimg.imread('/content/data/with_mask/with_mask_2404.jpg')
imgplot = plt.imshow(img)
plt.show()

img = cv2.imread('/content/data/without_mask/without_mask_1000.jpg')
cv2_imshow(img)

"""**Image Resizing and converting to numpy array**"""

path = '/content/data/with_mask/'

data = []

for img in with_mask:
  image = Image.open( path + img)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)


path = '/content/data/without_mask/'

for img in without_mask:
  image = Image.open( path + img)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

type(data)

type(data[0])

data[0].shape

len(data)

X = np.array(data)
Y = np.array(labels)

print(X.shape)

print(Y.shape)

"""**Train Test Split**"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2,stratify=Y)

print(X.shape,X_train.shape,X_test.shape)

"""**Scaling the data**"""

X_train_scaled = X_train/255
X_test_scaled = X_test/255

"""**Building Convolutional Neural Network**"""

import tensorflow as tf
from tensorflow import keras

num_of_classes = 2
model = keras.Sequential()

model.add(keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape = (128,128,3) ))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu' ))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Flatten())

model.add(keras.layers.Dense(128, activation = 'relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(64, activation = 'relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(num_of_classes,activation='sigmoid'))

model.compile(optimizer ='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['acc'])

history = model.fit(X_train_scaled, Y_train, validation_split=0.1,epochs=4)

loss, accuracy = model.evaluate(X_test_scaled,Y_test)
print('Test Accuracy',accuracy*100)

h = history
plt.plot(h.history['loss'],label='train loss')
plt.plot(h.history['val_loss'], label='validation loss')
plt.legend()
plt.show()

plt.plot(h.history['acc'],label='train acuracy')
plt.plot(h.history['val_acc'], label='validation accuracy')
plt.legend()
plt.show()

input_image_path = input('Path of the image to be predicted:')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image,(128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled,[1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 1:
  print('The person in the image is wearing mask')
else:
  print('The person in the image is not wearing mask')

